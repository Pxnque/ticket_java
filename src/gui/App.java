/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import Objects.TicketItem;
import com.formdev.flatlaf.themes.FlatMacLightLaf;
import database.ConnectionDB;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import models.Printsupport;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.swing.text.AbstractDocument;
import models.NumericFilters;


/**
 *
 * @author PC
 */
public class App extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(App.class.getName());
    private static final String THERMAL_PRINTER_HINT = "POS-80";

    /**
     * Creates new form App
     */
    private DefaultTableModel tableModel;
    public App() {
        
        initComponents();
        ((AbstractDocument) cantidadField.getDocument()).setDocumentFilter(new NumericFilters.IntegerFilter());
        ((AbstractDocument) montoField1.getDocument()).setDocumentFilter(new NumericFilters.DecimalFilter());
        initTableModel();
        ConnectionDB.initializeDatabase();
        
        
    }
    private void initTableModel() {
    tableModel = new DefaultTableModel(
        new Object[][]{}, 
        new String[]{"CANTIDAD", "DESCRIPCIÓN", "MONTO", "ELIMINAR"}
    ) {
        @Override
        public boolean isCellEditable(int row, int column) {
            // Only allow editing in the ELIMINAR column if you want (not required)
            return false; // we'll use a click listener instead
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            switch (columnIndex) {
                case 0: return Integer.class;
                case 1: return String.class;
                case 2: return Double.class;
                default: return Object.class;
            }
        }
    };

    itemsTable.setModel(tableModel);


    actualizarTotal();

    // Add mouse listener for "ELIMINAR" clicks
    itemsTable.addMouseListener(new MouseAdapter() {
        @Override
        public void mouseClicked(MouseEvent e) {
            int row = itemsTable.rowAtPoint(e.getPoint());
            int col = itemsTable.columnAtPoint(e.getPoint());
            if (row >= 0 && col == 3) { // ELIMINAR column
                tableModel.removeRow(row);
                actualizarTotal();
            }
        }
    });
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        pacienteField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cantidadField = new javax.swing.JTextField();
        montoField1 = new javax.swing.JTextField();
        agregarButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        descripcionField = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemsTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        labelTotal = new javax.swing.JLabel();
        imprimirButton = new javax.swing.JButton();
        historialButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setText("Crear Ticket");

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Cantidad:");

        pacienteField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        pacienteField.setToolTipText("");
        pacienteField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pacienteFieldActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Descripción del artículo:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Monto:");

        montoField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                montoField1ActionPerformed(evt);
            }
        });
        montoField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                montoField1KeyPressed(evt);
            }
        });

        agregarButton.setBackground(new java.awt.Color(255, 153, 102));
        agregarButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        agregarButton.setForeground(new java.awt.Color(255, 255, 255));
        agregarButton.setText("Agregar Item");
        agregarButton.setMaximumSize(new java.awt.Dimension(150, 27));
        agregarButton.setPreferredSize(new java.awt.Dimension(150, 27));
        agregarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarButtonActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Nombre del paciente:");

        descripcionField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        descripcionField.setToolTipText("");
        descripcionField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descripcionFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(descripcionField, javax.swing.GroupLayout.PREFERRED_SIZE, 799, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addGap(278, 278, 278)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2)
                                        .addComponent(cantidadField, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addComponent(montoField1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(agregarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel3)
                        .addComponent(pacienteField, javax.swing.GroupLayout.PREFERRED_SIZE, 799, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pacienteField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descripcionField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cantidadField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(montoField1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(agregarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel5.setText("Desglose de items:");

        itemsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "CANTIDAD", "DESCRIPCIÓN", "MONTO", "ELIMINAR"
            }
        ));
        jScrollPane1.setViewportView(itemsTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 798, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(102, 102, 102));

        labelTotal.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        labelTotal.setForeground(new java.awt.Color(255, 255, 255));
        labelTotal.setText("Total: $0.0");

        imprimirButton.setBackground(new java.awt.Color(51, 102, 0));
        imprimirButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        imprimirButton.setForeground(new java.awt.Color(255, 255, 255));
        imprimirButton.setText("Imprimir");
        imprimirButton.setMaximumSize(new java.awt.Dimension(150, 27));
        imprimirButton.setPreferredSize(new java.awt.Dimension(150, 27));
        imprimirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imprimirButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(labelTotal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(imprimirButton, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTotal)
                    .addComponent(imprimirButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4))
        );

        historialButton.setBackground(new java.awt.Color(0, 102, 255));
        historialButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        historialButton.setForeground(new java.awt.Color(255, 255, 255));
        historialButton.setText("Historial");
        historialButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historialButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(325, 325, 325)
                                .addComponent(jLabel1)
                                .addGap(107, 107, 107)
                                .addComponent(historialButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(0, 0, 0))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(historialButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void pacienteFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pacienteFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pacienteFieldActionPerformed

    private void agregarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarButtonActionPerformed
        // TODO add your handling code here:
        agregarItem();
        montoField1.setText("0.0");
    }//GEN-LAST:event_agregarButtonActionPerformed

    private void imprimirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imprimirButtonActionPerformed
    Object[][] raw = new Printsupport().getTableData(itemsTable);
    String nombrePaciente = pacienteField.getText().trim();
    Printsupport.setItems(raw,nombrePaciente);
    if(itemsTable.getRowCount() == 0){
        JOptionPane.showMessageDialog(this, "No hay items para imprimir");
        return;
    }
    if(nombrePaciente.isEmpty()){
        JOptionPane.showMessageDialog(this, "El nombre del paciente está vacío");
        return;
    }

    PrinterJob pj = PrinterJob.getPrinterJob();
    try {
        PrintService ps = findPrintServiceByName(THERMAL_PRINTER_HINT);
        if (ps == null) {
            // Fallback: default printer
            ps = PrintServiceLookup.lookupDefaultPrintService();
        }
        if (ps == null) {
            JOptionPane.showMessageDialog(this, "No printer found.");
            return;
        }

        pj.setPrintService(ps);
        pj.setPrintable(new Printsupport.MyPrintable(), Printsupport.getPageFormat(pj));
        pj.print(); // no dialog
        double total = getTotal();
        List<TicketItem> items = getTableItemsAsList();
        
        // Save to database
        boolean saved = ConnectionDB.saveTicketWithItems(nombrePaciente, total, items);
        if (saved) {
            System.out.println("Ticket saved to database successfully");
            // Also save using your existing TicketSaver for compatibility
           // TicketSaver.guardarTicketConItems(nombrePaciente, itemsTable, total);
        } else {
            System.err.println("Failed to save ticket to database");
            JOptionPane.showMessageDialog(this, "Advertencia: No se pudo guardar en la base de datos");
            // Still save using your existing method as fallback
           // TicketSaver.guardarTicketConItems(nombrePaciente, itemsTable, total);
        }
        limpiarTabla();
        
    } catch (PrinterException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al imprimir: " + ex.getMessage());
    }
    }//GEN-LAST:event_imprimirButtonActionPerformed

    private void montoField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_montoField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_montoField1ActionPerformed

    private void montoField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_montoField1KeyPressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_montoField1KeyPressed

    private void descripcionFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descripcionFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_descripcionFieldActionPerformed

    private void historialButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historialButtonActionPerformed
        // TODO add your handling code here:
        System.out.println( String.valueOf(System.currentTimeMillis()));
        new Dashboard().setVisible(true);
    }//GEN-LAST:event_historialButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            FlatMacLightLaf.setup();
        } catch (Exception e) {
            System.out.println("Error al aplicar el look and feel: "+e);
        }
        //</editor-fold>
          Runtime.getRuntime().addShutdownHook(new Thread(() -> {
        ConnectionDB.closeConnection();
        }));

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new App().setVisible(true));
    }
    private void limpiarTabla(){
        tableModel.setRowCount(0);
        labelTotal.setText("Total: $0");
        pacienteField.setText("");
        
    }
    private void agregarItem() {
    try {
        String descripcion = descripcionField.getText().trim();
        String montoTxt = montoField1.getText().trim();
        String cantidadTxt = cantidadField.getText().trim();

        if (descripcion.isEmpty()) {
            JOptionPane.showMessageDialog(this, "La descripción no puede estar vacía.");
            return;
        }

        double monto = Double.parseDouble(montoTxt);
        int cantidad = (int) Double.parseDouble(cantidadTxt); // allows "0.00" style input

       
        tableModel.addRow(new Object[]{cantidad, descripcion, monto, "X"});

        actualizarTotal();

        descripcionField.setText("");
        montoField1.setText("0.0");
        cantidadField.setText("0");
        int p = 0;
        montoField1.setText("0");
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Monto o cantidad inválidos.");
    }
}
    private double getTotal() {
    double total = 0.0;
    for (int i = 0; i < tableModel.getRowCount(); i++) {
        int cant = ((Number) tableModel.getValueAt(i, 0)).intValue();
        double monto = ((Number) tableModel.getValueAt(i, 2)).doubleValue();
        total += cant * monto;
    }
    return total;
}
    
    private void actualizarTotal() {
    double total = getTotal();
    labelTotal.setText("Total: $" + String.format("%.2f", total));
}
    private PrintService findPrintServiceByName(String printerSubstr) {
    PrintService[] services = PrintServiceLookup.lookupPrintServices(null, null);
    if (services == null) return null;
    for (PrintService ps : services) {
        if (ps.getName().toLowerCase().contains(printerSubstr.toLowerCase())) {
            return ps;
        }
    }
    return null;
}
    private List<TicketItem> getTableItemsAsList() {
    List<TicketItem> items = new ArrayList<>();
    
    for (int i = 0; i < tableModel.getRowCount(); i++) {
        int cantidad = ((Number) tableModel.getValueAt(i, 0)).intValue();
        String descripcion = (String) tableModel.getValueAt(i, 1);
        double monto = ((Number) tableModel.getValueAt(i, 2)).doubleValue();
        
        items.add(new TicketItem(descripcion, monto, cantidad));
    }
    
    return items;
}

    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregarButton;
    private javax.swing.JTextField cantidadField;
    private javax.swing.JTextField descripcionField;
    private javax.swing.JButton historialButton;
    private javax.swing.JButton imprimirButton;
    private javax.swing.JTable itemsTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelTotal;
    private javax.swing.JTextField montoField1;
    private javax.swing.JTextField pacienteField;
    // End of variables declaration//GEN-END:variables
}
